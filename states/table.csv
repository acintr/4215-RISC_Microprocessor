reset,0,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,No Op,,0,011,0,000,0,Increment
fetch,1,0,0,0,1,0,0,0,10,00,01,1,0,10000,0,El MAR se actualiza con el address mostrado en el Program Counter para pasarlo a RAM ,,1,011,0,000,0,Increment
,2,0,1,0,0,0,1,1,10,00,01,1,0,10001,0,Se actualiza el Program Counter para la otra posible instrucción y se prepara RAM para que pueda leer lo pasado en MAR ,,2,011,0,000,0,Increment
,3,0,0,1,0,0,1,1,00,00,00,0,0,00000,0,Esperar por MOC = 1. Cuando se complete el contenido de DataOut que se acaba de leer se pasa al Instruction Register ,,3,101,1,000,3,incr/cr
,4,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,Verifica Cond del Condition Tester. Si no se cumple se vuelve a empezar instruction Fetch. Si se cumple se procede a buscar el próximo estado basado en el contenido del Encoder,,4,100,0,001,1,CR/enc
ADD R-R,5,0,1,0,0,0,0,0,00,00,00,0,0,00000,0,,,5,010,0,000,1,CR
ADD (shift),6,0,1,0,0,0,0,0,00,01,00,0,0,00000,0,,,6,010,0,000,1,CR
ADD (imm),7,0,1,0,0,0,0,0,00,01,00,0,0,00000,0,,,7,010,0,000,1,CR
CMP(imm),8,1,0,0,0,0,0,0,00,01,00,0,0,00000,0,,,8,010,0,000,1,CR
MOV(imm),9,0,1,0,0,0,0,0,00,01,00,0,0,00000,0,,,9,010,0,000,1,CR
ADD R-R (S),10,1,1,0,0,0,0,0,00,00,00,0,0,00000,0,ADD R-R actualiza los flags al tener el Flag Register encendido,,10,010,0,000,1,CR
ADD(shift) (S),11,1,1,0,0,0,0,0,00,01,00,0,0,00000,0,ADD shift actualiza los flags al tener el Flag Register encendido,,11,010,0,000,1,CR
ADD (imm) (S),12,1,1,0,0,0,0,0,00,01,00,0,0,00000,0,ADD imm actualiza los flags al tener el Flag Register encendido,,12,010,0,000,1,CR
MOV(imm) (S),13,1,1,0,0,0,0,0,00,01,00,0,0,00000,0,MOV actualiza los flags al tener el Flag Register encendido,,13,010,0,000,1,CR
B,14,0,1,0,0,0,0,0,10,01,01,1,0,10010,0,,,14,010,0,000,1,CR
Link,15,0,1,0,0,0,0,0,10,11,11,1,0,10000,0,Luego de aqui se repite estado de B.,,15,010,0,000,14,CR
IMM_OFF_Buffer,16,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,+/-?,,16,101,1,010,18,incr/CR
IMM_OFF,17,0,0,0,1,0,0,0,00,01,00,1,0,00100,0,MAR <- EA = Rn + offset,,17,010,0,000,36,CR
,18,0,0,0,1,0,0,0,00,01,00,1,0,00010,0,MAR <- EA = Rn - offset,,18,010,0,000,36,CR
IMM_PRE_Buffer,19,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,+/-?,,19,101,1,010,21,incr/CR
IMM_PRE,20,0,0,0,1,1,0,0,00,01,00,1,1,00100,0,MAR <- EA = Rn + offset,,20,010,0,000,22,CR
,21,0,0,0,1,1,0,0,00,01,00,1,1,00010,0,MAR <- EA = Rn - offset,,21,011,0,000,0,Increment
,22,0,1,0,0,0,0,0,00,10,10,1,0,01101,0,Rn <- EA,,22,010,0,000,36,CR
IMM_POST,23,0,0,0,1,0,0,0,00,00,00,1,0,10000,0,MAR <- Rn,,23,101,1,010,25,incr/CR
,24,0,1,0,0,0,0,0,00,01,10,1,0,00100,0,Rn <- Rn + offset,,24,010,0,000,36,CR
,25,0,1,0,0,0,0,0,00,01,10,1,0,00010,0,Rn <- Rn - offset,,25,010,0,000,36,CR
REG_OFF_Buffer,26,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,+/-?,,26,101,1,010,28,incr/CR
REG_OFF,27,0,0,0,1,0,0,0,00,00,00,1,0,00100,0,MAR <- EA = Rn + Rm,,27,010,0,000,36,CR
,28,0,0,0,1,0,0,0,00,00,00,1,0,00100,0,MAR <- EA = Rn - Rm,,28,010,0,000,36,CR
REG_PRE_Buffer,29,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,+/-?,,29,101,1,010,31,incr/CR
REG_PRE,30,0,0,0,1,1,0,0,00,00,00,1,1,00100,0,MAR <- EA = Rn + Rm,,30,010,0,000,32,CR
,31,0,0,0,1,1,0,0,00,00,00,1,1,00010,0,MAR <- EA = Rn - Rm,,31,011,0,000,0,Increment
,32,0,1,0,0,0,0,0,00,10,10,1,0,01101,0,Rn <- EA,,32,010,0,000,36,CR
REG_POST,33,0,0,0,1,0,0,0,00,00,00,1,0,10000,0,MAR <- Rn,,33,101,1,010,35,incr/CR
,34,0,1,0,0,0,0,0,00,00,10,1,0,00100,0,Rn <- Rn + offset,,34,010,0,000,36,CR
,35,0,1,0,0,0,0,0,00,00,10,1,0,00010,0,Rn <- Rn - offset,,35,011,0,000,0,Increment
Buffer State 1,36,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,D?,,36,101,0,011,44,incr/CR
Buffer State 2,37,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,D=0; L/S?,,37,101,1,100,41,incr/CR
LDR_BHW,38,0,0,0,0,0,1,1,00,00,00,0,0,00000,0,Accesando memoria,,38,011,0,000,39,incr
MOC?,39,0,0,0,0,1,1,1,00,10,00,0,0,00000,0,Cargando MDR,,39,101,1,000,39,incr/CR
,40,0,1,0,0,0,0,0,00,10,00,1,0,01101,0,Guardando MDR en Rd,,40,010,0,000,1,CR
STR_BHW,41,0,0,0,0,1,0,0,01,00,00,1,1,10000,0,Cargando MDR,,41,011,0,000,42,incr
,42,0,0,0,0,0,0,1,00,00,00,0,0,00000,0,Accesando memoria, ,42,011,0,000,43,incr
MOC?,43,0,0,0,0,0,0,1,00,00,00,0,0,00000,0,Guardando MDR en memoria,,43,001,1,000,43,1/CR
Buffer State 3,44,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,D=1; L/S?,,44,101,1,100,51,incr/CR
LDR_DOUBLEW,45,0,0,0,0,0,1,1,00,00,00,0,0,00000,0,Accesando memoria,,45,011,0,000,0,Increment
MOC?,46,0,0,0,0,1,1,1,00,10,00,0,0,00000,0,Cargando MDR,,46,101,1,000,46,incr/CR
,47,0,1,0,0,0,0,0,00,10,00,1,0,01101,0,Guardando MDR con word1 (Rd),,47,011,0,000,0,Increment
,48,0,0,0,0,0,1,1,00,00,00,0,0,00000,0,Accesando memoria,,48,011,0,000,0,Increment
MOC?,49,0,0,0,0,1,1,1,00,10,00,0,0,0000,0,Cargando MDR,,49,101,1,000,49,incr/CR
,50,0,1,0,0,0,0,0,00,10,00,1,0,01101,1,Guardando MDR con word2 (Rd+1),,50,010,0,000,1,CR
STR_DOUBLEW,51,0,0,0,0,1,0,0,01,00,00,1,1,10000,0,Cargando MDR word2 (Rd),,51,011,0,000,0,Increment
,52,0,0,0,0,0,0,1,00,00,00,0,0,00000,0,Accesando memoria,,52,011,0,000,0,increment
MOC?,53,0,0,0,0,0,0,1,00,00,00,0,0,00000,0,Guardando MDR en memoria,,53,101,1,000,53,incr/CR
,54,0,0,0,0,1,0,0,01,00,00,1,1,10000,1,Cargando MDR con word2 (Rd+1),,54,011,0,000,0,increment
,55,0,0,0,0,0,0,1,00,00,00,0,0,00000,0,Accesando memoria,,55,011,0,000,0,increment
MOC?,56,0,0,0,0,0,0,1,00,00,00,0,0,00000,0,Guardando MDR en memoria,,56,001,1,000,56,1/CR
CMP(reg),57,1,0,0,0,0,0,0,00,00,00,0,0,00000,0,,,57,010,0,000,1,CR
MOV(reg),58,0,1,0,0,0,0,0,00,00,00,0,0,00000,0,,,58,010,0,000,1,CR
MOV(reg)(S),59,1,1,0,0,0,0,0,00,00,00,0,0,00000,0,,,59,010,0,000,1,CR
RESET_SEQUENCE,60,0,0,0,0,0,0,0,00,00,00,0,0,00000,0,Begin RESET,,60,011,0,000,0,increment
,61,0,1,0,0,0,0,0,00,11,01,1,0,01101,0,Set PC to 0,,61,010,0,000,0,CR
,61,0,1,0,0,0,0,0,00,11,01,1,0,01101,0,Set PC to 0,,61,010,0,000,0,CR